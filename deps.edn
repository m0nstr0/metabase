 :paths
 ["src" "shared/src" "resources"]

 :aliases
 {
;;; Local Dev & test profiles

  ;; for local development: start a REPL with
  ;;
  ;;    clojure -A:dev (basic dev REPL that includes test namespaces)
  ;;    clojure -A:dev:drivers:drivers-dev (dev REPL w/ drivers + tests)
  ;;    clojure -A:dev:ee:ee-dev (dev REPL w/ EE code including tests)
  ;;
  ;; You can start a web server from this REPL with
  ;;
  ;;    (require 'dev)
  ;;    (dev/start!)
  :dev
  {:extra-deps
   {clj-http-fake/clj-http-fake                           {:mvn/version "1.0.3"
                                                           :exclusions  [slingshot/slingshot]}
    cloverage/cloverage                                   {:mvn/version "1.2.2"}
    eftest/eftest                                         {:mvn/version "0.5.9"}
    jonase/eastwood                                       {:mvn/version "1.2.2"}
    lein-check-namespace-decls/lein-check-namespace-decls {:mvn/version "1.0.4"} ; misnomer since this works on Clojure CLI now too
    pjstadig/humane-test-output                           {:mvn/version "0.11.0"}
    reifyhealth/specmonstah                               {:mvn/version "2.0.0"
                                                           :exclusions  [org.clojure/clojure
                                                                         org.clojure/clojurescript]}
    ring/ring-mock                                        {:mvn/version "0.4.0"}
    talltale/talltale                                     {:mvn/version "0.5.8"}}

   :extra-paths ["dev/src" "local/src" "test" "shared/test" "test_resources"]
   :jvm-opts    ["-Dmb.run.mode=dev"
                 "-Dmb.field.filter.operators.enabled=true"
                 "-Dmb.test.env.setting=ABCDEFG"
                 "-Duser.timezone=UTC"
                 "-Dfile.encoding=UTF-8"
                 "-Duser.language=en"
                 "-Duser.country=US"
                 ;; If Clojure fails to start (e.g. because of a compilation error somewhere) print the error
                 ;; report/stacktrace to stderr rather than to a random EDN file in /tmp/
                 "-Dclojure.main.report=stderr"
                 ;; Exceptions that get thrown repeatedly are created without stacktraces as a performance
                 ;; optimization in newer Java versions. This makes debugging pretty hard when working on stuff
                 ;; locally -- prefer debuggability over performance for local dev work.
                 "-XX:-OmitStackTraceInFastThrow"
                 ;; prevent Java icon from randomly popping up in macOS dock
                 "-Djava.awt.headless=true"]}

  ;; includes test code as source paths. Run tests with clojure -X:dev:test
  :test
  {:extra-paths ["test_config"]
   :exec-fn     metabase.test-runner/run-tests
   :jvm-opts    ["-Dmb.run.mode=test"
                 "-Dmb.db.in.memory=true"
                 "-Dmb.jetty.join=false"
                 "-Dmb.field.filter.operators.enabled=true"
                 "-Dmb.api.key=test-api-key"
                 ;; Different port from normal `:dev` so you can run tests on a different server.
                 ;; TODO -- figure out how to do a random port like in the old project.clj?
                 "-Dmb.jetty.port=3001"]}

  ;; run the dev server with
  ;; clojure -M:run
  ;; clojure -M:run:drivers (include all drivers)
  ;; clojure -M:run:ee (include EE code)
  :run
  {:main-opts ["-m" "metabase.core"]
   :jvm-opts  ["-Dmb.run.mode=dev"
               "-Djava.awt.headless=true"                   ; prevent Java icon from randomly popping up in macOS dock
               "-Dmb.jetty.port=3000"]}

  ;; alias for CI-specific options.
  :ci
  {:jvm-opts ["-Xmx2g"
              ;; normally CircleCI sets `CI` as an env var, so this is mostly to replicate that locally.
              "-Dci=TRUE"]}

  ;; include EE source code.
  :ee
  {:extra-paths ["enterprise/backend/src"]}

  ;; Include EE tests.
  ;; for ee dev: :dev:ee:ee-dev
  ;; for ee tests: clojure -X:dev:ee:ee-dev:test
  :ee-dev
  {:extra-paths ["enterprise/backend/test"]}

  ;; these aliases exist for symmetry with the ee aliases. Empty for now.
  :oss
  {}

  :oss-dev
  {}

  ;; for local dev -- include the drivers locally with :dev:drivers
  :drivers
  {:extra-deps
   {metabase/driver-modules {:local/root "modules/drivers"}}}

  ;; for local dev: include drivers as well as their tests.
  ;;
  ;;    clojure -X:dev:drivers:drivers-dev:test
  ;;
  ;; or
  ;;
  ;;    clojure -X:dev:ee:ee-dev:drivers:drivers-dev:test (for EE)
  :drivers-dev
  {:extra-paths
   ["modules/drivers/bigquery/test"
    "modules/drivers/bigquery-cloud-sdk/test"
    "modules/drivers/druid/test"
    "modules/drivers/googleanalytics/test"
    "modules/drivers/mongo/test"
    "modules/drivers/oracle/test"
    "modules/drivers/presto/test"
    "modules/drivers/presto-common/test"
    "modules/drivers/presto-jdbc/test"
    "modules/drivers/redshift/test"
    "modules/drivers/snowflake/test"
    "modules/drivers/sparksql/test"
    "modules/drivers/sqlite/test"
    "modules/drivers/sqlserver/test"
    "modules/drivers/vertica/test"]}

;;; Linters

  ;; clojure -X:dev:ee:ee-dev:drivers:drivers-dev:test:namespace-checker
  :namespace-checker
  {:exec-fn   metabase.linters.namespace-checker/check-namespace-decls
   :exec-args {:prefix-rewriting false}}

  ;; clojure -M:dev:ee:ee-dev:drivers:drivers-dev:check
  :check
  {:extra-deps {athos/clj-check {:git/url "https://github.com/athos/clj-check.git"
                                 :sha     "518d5a1cbfcd7c952f548e6dbfcb9a4a5faf9062"}}
   :main-opts  ["-m" "clj-check.check"]}

  ;; clojure -X:dev:ee:ee-dev:drivers:drivers-dev:test:eastwood
  :eastwood
  {:exec-fn   metabase.linters.eastwood/eastwood
   :exec-args {;; manually specify the source paths for the time being (exclude test paths) until we fix Eastwood
               ;; errors in the test paths (once PR #17193 is merged)
               :source-paths    ["src"
                                 "shared/src"
                                 "enterprise/backend/src"
                                 "modules/drivers/bigquery/src"
                                 "modules/drivers/bigquery-cloud-sdk/src"
                                 "modules/drivers/druid/src"
                                 "modules/drivers/googleanalytics/src"
                                 "modules/drivers/mongo/src"
                                 "modules/drivers/oracle/src"
                                 "modules/drivers/presto/src"
                                 "modules/drivers/presto-common/src"
                                 "modules/drivers/presto-jdbc/src"
                                 "modules/drivers/redshift/src"
                                 "modules/drivers/snowflake/src"
                                 "modules/drivers/sparksql/src"
                                 "modules/drivers/sqlite/src"
                                 "modules/drivers/sqlserver/src"
                                 "modules/drivers/vertica/src"]
               :add-linters     [:unused-private-vars
                                 ;; These linters are pretty useful but give a few false
                                 ;; positives and can't be selectively disabled (yet)
                                 ;;
                                 ;; For example see https://github.com/jonase/eastwood/issues/193
                                 ;;
                                 ;; It's still useful to re-enable them and run them every once
                                 ;; in a while because they catch a lot of actual errors too.
                                 ;; Keep an eye on the issue above and re-enable them if we can
                                 ;; get them to work
                                 #_:unused-fn-args
                                 #_:unused-locals]
               :exclude-linters [ ;; Turn this off temporarily until we finish removing
                                 ;; self-deprecated functions & macros
                                 :deprecations
                                 ;; this has a fit in libs that use Potemkin `import-vars` such
                                 ;; as `java-time`
                                 :implicit-dependencies
                                 ;; too many false positives for now
                                 :unused-ret-vals]}}

  ;; clojure -T:whitespace-linter
  :whitespace-linter
  {:deps       {com.github.camsaul/whitespace-linter {:sha "912644a2b9cc91edcce31a6fa997c46479341a1d"}}
   :ns-default whitespace-linter
   :exec-args  {:paths            ["./.dir-locals.el"
                                   "./deps.edn"
                                   "./package.json"
                                   "./shadow-cljs.edn"
                                   ".circleci"
                                   ".github"
                                   "bin"
                                   "enterprise"
                                   "frontend"
                                   "resources"
                                   "shared"
                                   "src"
                                   "test"]
                :include-patterns ["\\.clj.?$"
                                   "\\.edn$"
                                   "\\.el$"
                                   "\\.html$"
                                   "\\.json$"
                                   "\\.jsx?$"
                                   "\\.sh$"
                                   "\\.yaml$"
                                   "\\.yml$"]
                :exclude-patterns ["resources/i18n/.*\\.edn$"
                                   "resources/frontend_client"
                                   "resources/frontend_shared"
                                   "resources/html-entities.edn"
                                   "frontend/src/cljs"
                                   "frontend/test/metabase/lib/urls\\.unit\\.spec\\.js$"
                                   "frontend/test/metabase/lib/formatting\\.unit\\.spec\\.js$"
                                   "shared/src/metabase/shared/util/currency\\.cljc$"]}}

  ;; clojure -X:dev:ee:ee-dev:test:cloverage
  :cloverage
  {:exec-fn   metabase.cloverage-runner/run-project
   :exec-args {:fail-threshold 69
               :codecov?       true
               ;; don't instrument logging forms, since they won't get executed as part of tests anyway
               ;; log calls expand to these
               :exclude-call
               [clojure.tools.logging/logf
                clojure.tools.logging/logp]

               :src-ns-path
               ["src" "enterprise/backend/src" "shared/src"]

               :test-ns-path
               ["test" "enterprise/backend/test" "shared/test"]

               :ns-regex
               ["^metabase.*" "^metabase-enterprise.*"]

               ;; don't instrument Postgres/MySQL driver namespaces, because we don't current run tests for them
               ;; as part of recording test coverage, which means they can give us false positives.
               ;;
               ;; regex literals aren't allowed in EDN. We parse them in `./test/cloverage.clj`
               :ns-exclude-regex
               ["metabase\\.driver\\.mysql" "metabase\\.driver\\.postgres"]}
   ;; different port from `:test` so you can run it at the same time as `:test`.
   :jvm-opts ["-Dmb.jetty.port=3002"]}

;;; building Uberjar

  ;; clojure -T:build uberjar
  ;; clojure -T:build uberjar :edition :ee
  :build
  {:deps       {io.github.clojure/tools.build   {:git/tag "v0.7.5" :git/sha "2526f58"}
                com.github.seancorfield/depstar {:mvn/version "2.1.303"}
                metabase/build.common           {:local/root "bin/common"}
                metabase/buid-mb                {:local/root "bin/build-mb"}}
   :ns-default build}

;;; Other misc convenience aliases

  ;; Profile Metabase start time with clojure -M:profile
  :profile
  {:main-opts ["-m" "metabase.core" "profile"]
   :jvm-opts  ["-XX:+CITime" ; print time spent in JIT compiler
               "-XX:+PrintGC"]}

  ;; get the H2 shell with clojure -X:h2
  :h2
  {:extra-paths ["dev/src"]
   :exec-fn     dev.h2-shell/shell
   :java-opts   ["-Dfile.encoding=UTF-8"]}

  ;; clojure -M:generate-automagic-dashboards-pot
  :generate-automagic-dashboards-pot
  {:main-opts ["-m" "metabase.automagic-dashboards.rules"]}

  ;; Start a Network REPL (nrepl) that you can connect your editor to.
  ;;
  ;; clojure -M:dev:nrepl (etc.)
  :nrepl
  {:extra-deps {nrepl/nrepl {:mvn/version "0.9.0"}}
   :main-opts  ["-m" "nrepl.cmdline"]}

  ;; Liquibase CLI:
  ;;
  ;;    clojure -M:liquibase <command>
  ;;
  ;; e.g.
  ;;
  ;;    clojure -M:liquibase dbDoc target/liquibase
  :liquibase
  {:extra-deps  {ch.qos.logback/logback-classic {:mvn/version "1.2.10"}}
   :extra-paths ["dev/src"]
   :main-opts   ["-m" "dev.liquibase"]}}}

  ;; TODO -- consider creating an alias that includes the `./bin` build-drivers & release code as well so we can work
  ;; on them all from a single REPL process.
